
stage2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000398  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005b0  00000000  00000000  000004da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002c3  00000000  00000000  00000a8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000024f  00000000  00000000  00000d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000f9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000271  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000213  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	e4 c0       	rjmp	.+456    	; 0x202 <__vector_14>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	45 d1       	rcall	.+650    	; 0x33e <main>
  b4:	6f c1       	rjmp	.+734    	; 0x394 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z14PWM_AddChannelh>:
void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
	     i < ActiveChann.Num && pwmDutyTab[ActiveChann.Tab[i]] < pwmDutyTab[channel]; 
  b8:	90 91 06 01 	lds	r25, 0x0106

void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
  bc:	99 23       	and	r25, r25
  be:	31 f1       	breq	.+76     	; 0x10c <_Z14PWM_AddChannelh+0x54>
	     i < ActiveChann.Num && pwmDutyTab[ActiveChann.Tab[i]] < pwmDutyTab[channel]; 
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	e8 5f       	subi	r30, 0xF8	; 248
  ca:	fe 4f       	sbci	r31, 0xFE	; 254
  cc:	40 81       	ld	r20, Z
  ce:	51 81       	ldd	r21, Z+1	; 0x01
  d0:	e0 91 00 01 	lds	r30, 0x0100
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	ee 0f       	add	r30, r30
  d8:	ff 1f       	adc	r31, r31
  da:	e8 5f       	subi	r30, 0xF8	; 248
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	20 81       	ld	r18, Z
  e0:	31 81       	ldd	r19, Z+1	; 0x01
  e2:	24 17       	cp	r18, r20
  e4:	35 07       	cpc	r19, r21
  e6:	a0 f4       	brcc	.+40     	; 0x110 <_Z14PWM_AddChannelh+0x58>
  e8:	e1 e0       	ldi	r30, 0x01	; 1
  ea:	f1 e0       	ldi	r31, 0x01	; 1

void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	6f 5f       	subi	r22, 0xFF	; 255
  f0:	69 17       	cp	r22, r25
  f2:	79 f0       	breq	.+30     	; 0x112 <_Z14PWM_AddChannelh+0x5a>
	     i < ActiveChann.Num && pwmDutyTab[ActiveChann.Tab[i]] < pwmDutyTab[channel]; 
  f4:	a1 91       	ld	r26, Z+
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	a8 5f       	subi	r26, 0xF8	; 248
  fe:	be 4f       	sbci	r27, 0xFE	; 254
 100:	2d 91       	ld	r18, X+
 102:	3c 91       	ld	r19, X
 104:	24 17       	cp	r18, r20
 106:	35 07       	cpc	r19, r21
 108:	90 f3       	brcs	.-28     	; 0xee <_Z14PWM_AddChannelh+0x36>
 10a:	03 c0       	rjmp	.+6      	; 0x112 <_Z14PWM_AddChannelh+0x5a>

void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
 10c:	69 2f       	mov	r22, r25
 10e:	01 c0       	rjmp	.+2      	; 0x112 <_Z14PWM_AddChannelh+0x5a>
 110:	60 e0       	ldi	r22, 0x00	; 0
		 ++i );
	
	// Move all element not less than
	// pwmDutyTab[channel] up for 1 index.
	// After add new element in the formed gap.
	asm("cli\n");
 112:	f8 94       	cli
    for( j = ActiveChann.Num; j > i; --j){
 114:	69 17       	cp	r22, r25
 116:	68 f4       	brcc	.+26     	; 0x132 <_Z14PWM_AddChannelh+0x7a>
 118:	29 2f       	mov	r18, r25
		ActiveChann.Tab[j] = ActiveChann.Tab[j-1];
 11a:	e2 2f       	mov	r30, r18
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	df 01       	movw	r26, r30
 124:	11 97       	sbiw	r26, 0x01	; 1
 126:	3c 91       	ld	r19, X
 128:	30 83       	st	Z, r19
	
	// Move all element not less than
	// pwmDutyTab[channel] up for 1 index.
	// After add new element in the formed gap.
	asm("cli\n");
    for( j = ActiveChann.Num; j > i; --j){
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	26 13       	cpse	r18, r22
 12e:	f5 cf       	rjmp	.-22     	; 0x11a <_Z14PWM_AddChannelh+0x62>
 130:	01 c0       	rjmp	.+2      	; 0x134 <_Z14PWM_AddChannelh+0x7c>
 132:	69 2f       	mov	r22, r25
		ActiveChann.Tab[j] = ActiveChann.Tab[j-1];
	}
	ActiveChann.Tab[j] = channel;
 134:	e6 2f       	mov	r30, r22
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	80 83       	st	Z, r24
	asm("sei\n");
 13e:	78 94       	sei
	
	++ActiveChann.Num;
 140:	9f 5f       	subi	r25, 0xFF	; 255
 142:	90 93 06 01 	sts	0x0106, r25
 146:	08 95       	ret

00000148 <_Z6PinOuthh>:
}

void PinOut(u8 channel, u8 out){
	if(out){
 148:	66 23       	and	r22, r22
 14a:	c1 f0       	breq	.+48     	; 0x17c <_Z6PinOuthh+0x34>
		*pinTab[channel].PORT |= 1 << pinTab[channel].p;
 14c:	97 e0       	ldi	r25, 0x07	; 7
 14e:	89 9f       	mul	r24, r25
 150:	d0 01       	movw	r26, r0
 152:	11 24       	eor	r1, r1
 154:	ac 5e       	subi	r26, 0xEC	; 236
 156:	be 4f       	sbci	r27, 0xFE	; 254
 158:	12 96       	adiw	r26, 0x02	; 2
 15a:	ed 91       	ld	r30, X+
 15c:	fc 91       	ld	r31, X
 15e:	13 97       	sbiw	r26, 0x03	; 3
 160:	40 81       	ld	r20, Z
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	c9 01       	movw	r24, r18
 168:	16 96       	adiw	r26, 0x06	; 6
 16a:	0c 90       	ld	r0, X
 16c:	02 c0       	rjmp	.+4      	; 0x172 <_Z6PinOuthh+0x2a>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <_Z6PinOuthh+0x26>
 176:	84 2b       	or	r24, r20
 178:	80 83       	st	Z, r24
 17a:	08 95       	ret
	}else{
		*pinTab[channel].PORT &= ~(1 << pinTab[channel].p);
 17c:	97 e0       	ldi	r25, 0x07	; 7
 17e:	89 9f       	mul	r24, r25
 180:	d0 01       	movw	r26, r0
 182:	11 24       	eor	r1, r1
 184:	ac 5e       	subi	r26, 0xEC	; 236
 186:	be 4f       	sbci	r27, 0xFE	; 254
 188:	12 96       	adiw	r26, 0x02	; 2
 18a:	ed 91       	ld	r30, X+
 18c:	fc 91       	ld	r31, X
 18e:	13 97       	sbiw	r26, 0x03	; 3
 190:	40 81       	ld	r20, Z
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	c9 01       	movw	r24, r18
 198:	16 96       	adiw	r26, 0x06	; 6
 19a:	0c 90       	ld	r0, X
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_Z6PinOuthh+0x5a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <_Z6PinOuthh+0x56>
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	80 83       	st	Z, r24
 1ac:	08 95       	ret

000001ae <_Z5Servo9ServoName11ServoAction>:
};

struct ActiveChann_TypeDef ActiveChann = {{0, 0, 0, 0, 0, 0}, 0, NUM_SERVO + 1};
	
void Servo(enum ServoName s, enum ServoAction a){
	switch(a){
 1ae:	66 23       	and	r22, r22
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <_Z5Servo9ServoName11ServoAction+0xa>
 1b2:	61 30       	cpi	r22, 0x01	; 1
 1b4:	d1 f0       	breq	.+52     	; 0x1ea <_Z5Servo9ServoName11ServoAction+0x3c>
 1b6:	08 95       	ret
	case Init:
		// Set proper pins as outputs
		*pinTab[(u8)s].DDR |= 1 << pinTab[(u8)s].p;
 1b8:	97 e0       	ldi	r25, 0x07	; 7
 1ba:	89 9f       	mul	r24, r25
 1bc:	d0 01       	movw	r26, r0
 1be:	11 24       	eor	r1, r1
 1c0:	ac 5e       	subi	r26, 0xEC	; 236
 1c2:	be 4f       	sbci	r27, 0xFE	; 254
 1c4:	ed 91       	ld	r30, X+
 1c6:	fc 91       	ld	r31, X
 1c8:	11 97       	sbiw	r26, 0x01	; 1
 1ca:	90 81       	ld	r25, Z
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	9a 01       	movw	r18, r20
 1d2:	16 96       	adiw	r26, 0x06	; 6
 1d4:	0c 90       	ld	r0, X
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <_Z5Servo9ServoName11ServoAction+0x2e>
 1d8:	22 0f       	add	r18, r18
 1da:	33 1f       	adc	r19, r19
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <_Z5Servo9ServoName11ServoAction+0x2a>
 1e0:	29 2b       	or	r18, r25
 1e2:	20 83       	st	Z, r18
		PinOut((u8)s, LOW);
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	b0 cf       	rjmp	.-160    	; 0x148 <_Z6PinOuthh>
		break;
 1e8:	08 95       	ret
	case EnablePWM:
		PWM_AddChannel((u8)s);
 1ea:	66 cf       	rjmp	.-308    	; 0xb8 <_Z14PWM_AddChannelh>
 1ec:	08 95       	ret

000001ee <_Z18ATmega8_16bitTimerv>:
#include "main.h"

void ATmega8_16bitTimer(void)
{
	TCNT1 = 0xFFFF - SERVO_PWM_PERIOD_US;
 1ee:	8b ee       	ldi	r24, 0xEB	; 235
 1f0:	9a ef       	ldi	r25, 0xFA	; 250
 1f2:	9d bd       	out	0x2d, r25	; 45
 1f4:	8c bd       	out	0x2c, r24	; 44
	// Set timer clock to F_CPU / 8
	TCCR1B = 0x02;
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	8e bd       	out	0x2e, r24	; 46
	// Enable Overflow Interrupt
	TIMSK |= 1 << TOIE1;
 1fa:	87 b7       	in	r24, 0x37	; 55
 1fc:	84 60       	ori	r24, 0x04	; 4
 1fe:	87 bf       	out	0x37, r24	; 55
 200:	08 95       	ret

00000202 <__vector_14>:
}

// ISR to deal with software PWM
ISR(TIMER1_OVF_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	0b b6       	in	r0, 0x3b	; 59
 20e:	0f 92       	push	r0
 210:	1f 93       	push	r17
 212:	2f 93       	push	r18
 214:	3f 93       	push	r19
 216:	4f 93       	push	r20
 218:	5f 93       	push	r21
 21a:	6f 93       	push	r22
 21c:	7f 93       	push	r23
 21e:	8f 93       	push	r24
 220:	9f 93       	push	r25
 222:	af 93       	push	r26
 224:	bf 93       	push	r27
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	if( ActiveChann.Num > 0 ){
 22e:	80 91 06 01 	lds	r24, 0x0106
 232:	88 23       	and	r24, r24
 234:	09 f4       	brne	.+2      	; 0x238 <__vector_14+0x36>
 236:	69 c0       	rjmp	.+210    	; 0x30a <__vector_14+0x108>
		if( ActiveChann.State == NUM_SERVO + 1 ){
 238:	e0 91 07 01 	lds	r30, 0x0107
 23c:	e7 30       	cpi	r30, 0x07	; 7
 23e:	f1 f4       	brne	.+60     	; 0x27c <__vector_14+0x7a>
 240:	10 e0       	ldi	r17, 0x00	; 0
			for( u8 i = 0; i < ActiveChann.Num; ++i ){
 242:	c6 e0       	ldi	r28, 0x06	; 6
 244:	d1 e0       	ldi	r29, 0x01	; 1
				PinOut(ActiveChann.Tab[i], HIGH);
 246:	e1 2f       	mov	r30, r17
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	e0 50       	subi	r30, 0x00	; 0
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	80 81       	ld	r24, Z
 252:	7a df       	rcall	.-268    	; 0x148 <_Z6PinOuthh>
// ISR to deal with software PWM
ISR(TIMER1_OVF_vect)
{
	if( ActiveChann.Num > 0 ){
		if( ActiveChann.State == NUM_SERVO + 1 ){
			for( u8 i = 0; i < ActiveChann.Num; ++i ){
 254:	1f 5f       	subi	r17, 0xFF	; 255
 256:	88 81       	ld	r24, Y
 258:	18 17       	cp	r17, r24
 25a:	a8 f3       	brcs	.-22     	; 0x246 <__vector_14+0x44>
				PinOut(ActiveChann.Tab[i], HIGH);
			}
			ActiveChann.State = 0;
 25c:	10 92 07 01 	sts	0x0107, r1
			TCNT1 = 0xFFFF - pwmDutyTab[ActiveChann.Tab[0]];
 260:	e0 91 00 01 	lds	r30, 0x0100
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ee 0f       	add	r30, r30
 268:	ff 1f       	adc	r31, r31
 26a:	e8 5f       	subi	r30, 0xF8	; 248
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 81       	ld	r24, Z
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	9d bd       	out	0x2d, r25	; 45
 278:	8c bd       	out	0x2c, r24	; 44
 27a:	4b c0       	rjmp	.+150    	; 0x312 <__vector_14+0x110>
			}else{
			PinOut(ActiveChann.Tab[ActiveChann.State], LOW);
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	e0 50       	subi	r30, 0x00	; 0
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	60 df       	rcall	.-320    	; 0x148 <_Z6PinOuthh>
			
			if( ActiveChann.State < ActiveChann.Num - 1 ){
 288:	80 91 07 01 	lds	r24, 0x0107
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	20 91 06 01 	lds	r18, 0x0106
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	21 50       	subi	r18, 0x01	; 1
 296:	31 09       	sbc	r19, r1
 298:	82 17       	cp	r24, r18
 29a:	93 07       	cpc	r25, r19
 29c:	fc f4       	brge	.+62     	; 0x2dc <__vector_14+0xda>
				TCNT1 = 0xFFFF - ( pwmDutyTab[ActiveChann.Tab[ActiveChann.State+1]] - pwmDutyTab[ActiveChann.Tab[ActiveChann.State]] );
 29e:	fc 01       	movw	r30, r24
 2a0:	e0 50       	subi	r30, 0x00	; 0
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	a1 81       	ldd	r26, Z+1	; 0x01
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	aa 0f       	add	r26, r26
 2aa:	bb 1f       	adc	r27, r27
 2ac:	a8 5f       	subi	r26, 0xF8	; 248
 2ae:	be 4f       	sbci	r27, 0xFE	; 254
 2b0:	e0 81       	ld	r30, Z
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	e8 5f       	subi	r30, 0xF8	; 248
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	8d 91       	ld	r24, X+
 2be:	9c 91       	ld	r25, X
 2c0:	20 81       	ld	r18, Z
 2c2:	31 81       	ldd	r19, Z+1	; 0x01
 2c4:	82 1b       	sub	r24, r18
 2c6:	93 0b       	sbc	r25, r19
 2c8:	80 95       	com	r24
 2ca:	90 95       	com	r25
 2cc:	9d bd       	out	0x2d, r25	; 45
 2ce:	8c bd       	out	0x2c, r24	; 44
				++ActiveChann.State;
 2d0:	e7 e0       	ldi	r30, 0x07	; 7
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	80 81       	ld	r24, Z
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	80 83       	st	Z, r24
 2da:	1b c0       	rjmp	.+54     	; 0x312 <__vector_14+0x110>
				}else{
				TCNT1 = 0xFFFF - ( SERVO_PWM_PERIOD_US - pwmDutyTab[ActiveChann.Tab[ActiveChann.State]] );
 2dc:	fc 01       	movw	r30, r24
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	e0 81       	ld	r30, Z
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	ee 0f       	add	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	e8 5f       	subi	r30, 0xF8	; 248
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	20 81       	ld	r18, Z
 2f0:	31 81       	ldd	r19, Z+1	; 0x01
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	95 e0       	ldi	r25, 0x05	; 5
 2f6:	82 1b       	sub	r24, r18
 2f8:	93 0b       	sbc	r25, r19
 2fa:	80 95       	com	r24
 2fc:	90 95       	com	r25
 2fe:	9d bd       	out	0x2d, r25	; 45
 300:	8c bd       	out	0x2c, r24	; 44
				ActiveChann.State = NUM_SERVO + 1;
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	80 93 07 01 	sts	0x0107, r24
 308:	04 c0       	rjmp	.+8      	; 0x312 <__vector_14+0x110>
			}
		}
		}else{
		TCNT1 = 0xFFFF - SERVO_PWM_PERIOD_US;
 30a:	8b ee       	ldi	r24, 0xEB	; 235
 30c:	9a ef       	ldi	r25, 0xFA	; 250
 30e:	9d bd       	out	0x2d, r25	; 45
 310:	8c bd       	out	0x2c, r24	; 44
	}
}
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	1f 91       	pop	r17
 330:	0f 90       	pop	r0
 332:	0b be       	out	0x3b, r0	; 59
 334:	0f 90       	pop	r0
 336:	0f be       	out	0x3f, r0	; 63
 338:	0f 90       	pop	r0
 33a:	1f 90       	pop	r1
 33c:	18 95       	reti

0000033e <main>:

int main(void)
{
	SP = 0xFFF;
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	9f e0       	ldi	r25, 0x0F	; 15
 342:	9e bf       	out	0x3e, r25	; 62
 344:	8d bf       	out	0x3d, r24	; 61
	
    Servo(CanSat1, Init);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	31 df       	rcall	.-414    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
    Servo(CanSat2, Init);
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	2e df       	rcall	.-420    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
    Servo(CanSat3, Init);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	82 e0       	ldi	r24, 0x02	; 2
 356:	2b df       	rcall	.-426    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
    Servo(Parachute, Init);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	28 df       	rcall	.-432    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
    Servo(CanSatsHatchLock, Init);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	84 e0       	ldi	r24, 0x04	; 4
 362:	25 df       	rcall	.-438    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
    Servo(ParachuteHatchLock, Init);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	85 e0       	ldi	r24, 0x05	; 5
 368:	22 df       	rcall	.-444    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
	

	Servo(CanSat1, EnablePWM);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	1f df       	rcall	.-450    	; 0x1ae <_Z5Servo9ServoName11ServoAction>

	Servo(CanSat2, EnablePWM);
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	1c df       	rcall	.-456    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
	Servo(CanSat3, EnablePWM);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	19 df       	rcall	.-462    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
	Servo(Parachute, EnablePWM);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	16 df       	rcall	.-468    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
	Servo(CanSatsHatchLock, EnablePWM);
 382:	61 e0       	ldi	r22, 0x01	; 1
 384:	84 e0       	ldi	r24, 0x04	; 4
 386:	13 df       	rcall	.-474    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
	Servo(ParachuteHatchLock, EnablePWM);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	10 df       	rcall	.-480    	; 0x1ae <_Z5Servo9ServoName11ServoAction>
	
		ATmega8_16bitTimer();
 38e:	2f df       	rcall	.-418    	; 0x1ee <_Z18ATmega8_16bitTimerv>
	sei();
 390:	78 94       	sei
 392:	ff cf       	rjmp	.-2      	; 0x392 <main+0x54>

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>

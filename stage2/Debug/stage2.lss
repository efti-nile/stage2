
stage2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000278  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000040b  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000276  00000000  00000000  000007c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001e3  00000000  00000000  00000a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000271  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000019f  00000000  00000000  00000f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	7d c0       	rjmp	.+250    	; 0x134 <__vector_14>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 33       	cpi	r26, 0x3E	; 62
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	de d0       	rcall	.+444    	; 0x270 <main>
  b4:	df c0       	rjmp	.+446    	; 0x274 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z6PinOuthh>:
	
	++ActiveChann.Num;
}

u8 PinOut(u8 channel, u8 out){
	if(out){
  b8:	66 23       	and	r22, r22
  ba:	c1 f0       	breq	.+48     	; 0xec <_Z6PinOuthh+0x34>
		*pinTab[channel].PORT |= 1 << pinTab[channel].p;
  bc:	97 e0       	ldi	r25, 0x07	; 7
  be:	89 9f       	mul	r24, r25
  c0:	d0 01       	movw	r26, r0
  c2:	11 24       	eor	r1, r1
  c4:	ac 5e       	subi	r26, 0xEC	; 236
  c6:	be 4f       	sbci	r27, 0xFE	; 254
  c8:	12 96       	adiw	r26, 0x02	; 2
  ca:	ed 91       	ld	r30, X+
  cc:	fc 91       	ld	r31, X
  ce:	13 97       	sbiw	r26, 0x03	; 3
  d0:	40 81       	ld	r20, Z
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	c9 01       	movw	r24, r18
  d8:	16 96       	adiw	r26, 0x06	; 6
  da:	0c 90       	ld	r0, X
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <_Z6PinOuthh+0x2a>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	0a 94       	dec	r0
  e4:	e2 f7       	brpl	.-8      	; 0xde <_Z6PinOuthh+0x26>
  e6:	84 2b       	or	r24, r20
  e8:	80 83       	st	Z, r24
  ea:	18 c0       	rjmp	.+48     	; 0x11c <_Z6PinOuthh+0x64>
	}else{
		*pinTab[channel].PORT &= ~(1 << pinTab[channel].p);
  ec:	97 e0       	ldi	r25, 0x07	; 7
  ee:	89 9f       	mul	r24, r25
  f0:	d0 01       	movw	r26, r0
  f2:	11 24       	eor	r1, r1
  f4:	ac 5e       	subi	r26, 0xEC	; 236
  f6:	be 4f       	sbci	r27, 0xFE	; 254
  f8:	12 96       	adiw	r26, 0x02	; 2
  fa:	ed 91       	ld	r30, X+
  fc:	fc 91       	ld	r31, X
  fe:	13 97       	sbiw	r26, 0x03	; 3
 100:	40 81       	ld	r20, Z
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	c9 01       	movw	r24, r18
 108:	16 96       	adiw	r26, 0x06	; 6
 10a:	0c 90       	ld	r0, X
 10c:	02 c0       	rjmp	.+4      	; 0x112 <_Z6PinOuthh+0x5a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <_Z6PinOuthh+0x56>
 116:	80 95       	com	r24
 118:	84 23       	and	r24, r20
 11a:	80 83       	st	Z, r24
	}
	return 0;
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

00000120 <_Z18ATmega8_16bitTimerv>:
#include "main.h"

void ATmega8_16bitTimer(void)
{
	TCNT1 = 0xFFFF - SERVO_PWM_PERIOD_US;
 120:	8b ee       	ldi	r24, 0xEB	; 235
 122:	9a ef       	ldi	r25, 0xFA	; 250
 124:	9d bd       	out	0x2d, r25	; 45
 126:	8c bd       	out	0x2c, r24	; 44
	// Set timer clock to F_CPU / 8
	TCCR1B = 0x02;
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8e bd       	out	0x2e, r24	; 46
	// Enable Overflow Interrupt
	TIMSK |= 1 << TOIE1;
 12c:	87 b7       	in	r24, 0x37	; 55
 12e:	84 60       	ori	r24, 0x04	; 4
 130:	87 bf       	out	0x37, r24	; 55
 132:	08 95       	ret

00000134 <__vector_14>:
}

// ISR to deal with software PWM
ISR(TIMER1_OVF_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	0b b6       	in	r0, 0x3b	; 59
 140:	0f 92       	push	r0
 142:	1f 93       	push	r17
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
	if( ActiveChann.Num > 0 ){
 160:	80 91 06 01 	lds	r24, 0x0106
 164:	88 23       	and	r24, r24
 166:	09 f4       	brne	.+2      	; 0x16a <__vector_14+0x36>
 168:	69 c0       	rjmp	.+210    	; 0x23c <__vector_14+0x108>
		if( ActiveChann.State == NUM_SERVO + 1 ){
 16a:	e0 91 07 01 	lds	r30, 0x0107
 16e:	e7 30       	cpi	r30, 0x07	; 7
 170:	f1 f4       	brne	.+60     	; 0x1ae <__vector_14+0x7a>
 172:	10 e0       	ldi	r17, 0x00	; 0
			for( u8 i = 0; i < ActiveChann.Num; ++i ){
 174:	c6 e0       	ldi	r28, 0x06	; 6
 176:	d1 e0       	ldi	r29, 0x01	; 1
				PinOut(ActiveChann.Tab[i], HIGH);
 178:	e1 2f       	mov	r30, r17
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	80 81       	ld	r24, Z
 184:	99 df       	rcall	.-206    	; 0xb8 <_Z6PinOuthh>
// ISR to deal with software PWM
ISR(TIMER1_OVF_vect)
{
	if( ActiveChann.Num > 0 ){
		if( ActiveChann.State == NUM_SERVO + 1 ){
			for( u8 i = 0; i < ActiveChann.Num; ++i ){
 186:	1f 5f       	subi	r17, 0xFF	; 255
 188:	88 81       	ld	r24, Y
 18a:	18 17       	cp	r17, r24
 18c:	a8 f3       	brcs	.-22     	; 0x178 <__vector_14+0x44>
				PinOut(ActiveChann.Tab[i], HIGH);
			}
			ActiveChann.State = 0;
 18e:	10 92 07 01 	sts	0x0107, r1
			TCNT1 = 0xFFFF - pwmDutyTab[ActiveChann.Tab[0]];
 192:	e0 91 00 01 	lds	r30, 0x0100
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	e8 5f       	subi	r30, 0xF8	; 248
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	80 81       	ld	r24, Z
 1a2:	91 81       	ldd	r25, Z+1	; 0x01
 1a4:	80 95       	com	r24
 1a6:	90 95       	com	r25
 1a8:	9d bd       	out	0x2d, r25	; 45
 1aa:	8c bd       	out	0x2c, r24	; 44
 1ac:	4b c0       	rjmp	.+150    	; 0x244 <__vector_14+0x110>
			}else{
			PinOut(ActiveChann.Tab[ActiveChann.State], LOW);
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e0 50       	subi	r30, 0x00	; 0
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	7f df       	rcall	.-258    	; 0xb8 <_Z6PinOuthh>
			
			if( ActiveChann.State < ActiveChann.Num - 1 ){
 1ba:	80 91 07 01 	lds	r24, 0x0107
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	20 91 06 01 	lds	r18, 0x0106
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	31 09       	sbc	r19, r1
 1ca:	82 17       	cp	r24, r18
 1cc:	93 07       	cpc	r25, r19
 1ce:	fc f4       	brge	.+62     	; 0x20e <__vector_14+0xda>
				TCNT1 = 0xFFFF - ( pwmDutyTab[ActiveChann.Tab[ActiveChann.State+1]] - pwmDutyTab[ActiveChann.Tab[ActiveChann.State]] );
 1d0:	fc 01       	movw	r30, r24
 1d2:	e0 50       	subi	r30, 0x00	; 0
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	a1 81       	ldd	r26, Z+1	; 0x01
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	aa 0f       	add	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	a8 5f       	subi	r26, 0xF8	; 248
 1e0:	be 4f       	sbci	r27, 0xFE	; 254
 1e2:	e0 81       	ld	r30, Z
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e8 5f       	subi	r30, 0xF8	; 248
 1ec:	fe 4f       	sbci	r31, 0xFE	; 254
 1ee:	8d 91       	ld	r24, X+
 1f0:	9c 91       	ld	r25, X
 1f2:	20 81       	ld	r18, Z
 1f4:	31 81       	ldd	r19, Z+1	; 0x01
 1f6:	82 1b       	sub	r24, r18
 1f8:	93 0b       	sbc	r25, r19
 1fa:	80 95       	com	r24
 1fc:	90 95       	com	r25
 1fe:	9d bd       	out	0x2d, r25	; 45
 200:	8c bd       	out	0x2c, r24	; 44
				++ActiveChann.State;
 202:	e7 e0       	ldi	r30, 0x07	; 7
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	80 81       	ld	r24, Z
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 83       	st	Z, r24
 20c:	1b c0       	rjmp	.+54     	; 0x244 <__vector_14+0x110>
				}else{
				TCNT1 = 0xFFFF - ( SERVO_PWM_PERIOD_US - pwmDutyTab[ActiveChann.Tab[ActiveChann.State]] );
 20e:	fc 01       	movw	r30, r24
 210:	e0 50       	subi	r30, 0x00	; 0
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	e0 81       	ld	r30, Z
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e8 5f       	subi	r30, 0xF8	; 248
 21e:	fe 4f       	sbci	r31, 0xFE	; 254
 220:	20 81       	ld	r18, Z
 222:	31 81       	ldd	r19, Z+1	; 0x01
 224:	84 e1       	ldi	r24, 0x14	; 20
 226:	95 e0       	ldi	r25, 0x05	; 5
 228:	82 1b       	sub	r24, r18
 22a:	93 0b       	sbc	r25, r19
 22c:	80 95       	com	r24
 22e:	90 95       	com	r25
 230:	9d bd       	out	0x2d, r25	; 45
 232:	8c bd       	out	0x2c, r24	; 44
				ActiveChann.State = NUM_SERVO + 1;
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	80 93 07 01 	sts	0x0107, r24
 23a:	04 c0       	rjmp	.+8      	; 0x244 <__vector_14+0x110>
			}
		}
		}else{
		TCNT1 = 0xFFFF - SERVO_PWM_PERIOD_US;
 23c:	8b ee       	ldi	r24, 0xEB	; 235
 23e:	9a ef       	ldi	r25, 0xFA	; 250
 240:	9d bd       	out	0x2d, r25	; 45
 242:	8c bd       	out	0x2c, r24	; 44
	}
}
 244:	ff 91       	pop	r31
 246:	ef 91       	pop	r30
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	bf 91       	pop	r27
 24e:	af 91       	pop	r26
 250:	9f 91       	pop	r25
 252:	8f 91       	pop	r24
 254:	7f 91       	pop	r23
 256:	6f 91       	pop	r22
 258:	5f 91       	pop	r21
 25a:	4f 91       	pop	r20
 25c:	3f 91       	pop	r19
 25e:	2f 91       	pop	r18
 260:	1f 91       	pop	r17
 262:	0f 90       	pop	r0
 264:	0b be       	out	0x3b, r0	; 59
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <main>:
    Servo(CanSat3, Init);
    Servo(Parachute, Init);
    Servo(CanSatsHatchLock, Init);
    Servo(ParachuteHatchLock, Init);*/
	
	ATmega8_16bitTimer();
 270:	57 df       	rcall	.-338    	; 0x120 <_Z18ATmega8_16bitTimerv>
 272:	ff cf       	rjmp	.-2      	; 0x272 <main+0x2>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>

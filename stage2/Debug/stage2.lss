
stage2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000044e  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800154  00800154  00000536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000536  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e5  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000040d  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000477  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000384  00000000  00000000  00001754  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006db  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000021b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c1       	rjmp	.+596    	; 0x28e <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e4       	ldi	r30, 0x4E	; 78
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 35       	cpi	r26, 0x54	; 84
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e5       	ldi	r26, 0x54	; 84
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 35       	cpi	r26, 0x55	; 85
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	8a d1       	rcall	.+788    	; 0x3d8 <main>
  c4:	c2 c1       	rjmp	.+900    	; 0x44a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <_Z14PWM_AddChannelh>:
void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
	     i < ActiveChann.Num && pwmDutyTab[ActiveChann.Tab[i]] < pwmDutyTab[channel]; 
  c8:	90 91 08 01 	lds	r25, 0x0108

void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
  cc:	99 23       	and	r25, r25
  ce:	31 f1       	breq	.+76     	; 0x11c <_Z14PWM_AddChannelh+0x54>
	     i < ActiveChann.Num && pwmDutyTab[ActiveChann.Tab[i]] < pwmDutyTab[channel]; 
  d0:	e8 2f       	mov	r30, r24
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	e6 5f       	subi	r30, 0xF6	; 246
  da:	fe 4f       	sbci	r31, 0xFE	; 254
  dc:	40 81       	ld	r20, Z
  de:	51 81       	ldd	r21, Z+1	; 0x01
  e0:	e0 91 00 01 	lds	r30, 0x0100
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e6 5f       	subi	r30, 0xF6	; 246
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	20 81       	ld	r18, Z
  f0:	31 81       	ldd	r19, Z+1	; 0x01
  f2:	24 17       	cp	r18, r20
  f4:	35 07       	cpc	r19, r21
  f6:	a0 f4       	brcc	.+40     	; 0x120 <_Z14PWM_AddChannelh+0x58>
  f8:	e1 e0       	ldi	r30, 0x01	; 1
  fa:	f1 e0       	ldi	r31, 0x01	; 1

void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	6f 5f       	subi	r22, 0xFF	; 255
 100:	69 17       	cp	r22, r25
 102:	79 f0       	breq	.+30     	; 0x122 <_Z14PWM_AddChannelh+0x5a>
	     i < ActiveChann.Num && pwmDutyTab[ActiveChann.Tab[i]] < pwmDutyTab[channel]; 
 104:	a1 91       	ld	r26, Z+
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	aa 0f       	add	r26, r26
 10a:	bb 1f       	adc	r27, r27
 10c:	a6 5f       	subi	r26, 0xF6	; 246
 10e:	be 4f       	sbci	r27, 0xFE	; 254
 110:	2d 91       	ld	r18, X+
 112:	3c 91       	ld	r19, X
 114:	24 17       	cp	r18, r20
 116:	35 07       	cpc	r19, r21
 118:	90 f3       	brcs	.-28     	; 0xfe <_Z14PWM_AddChannelh+0x36>
 11a:	03 c0       	rjmp	.+6      	; 0x122 <_Z14PWM_AddChannelh+0x5a>

void PWM_AddChannel(u8 channel){
	u8 i, j;
	
	// Search for the first element not less than pwmDutyTab[channel]
	for( i = 0; 
 11c:	69 2f       	mov	r22, r25
 11e:	01 c0       	rjmp	.+2      	; 0x122 <_Z14PWM_AddChannelh+0x5a>
 120:	60 e0       	ldi	r22, 0x00	; 0
		 ++i );
	
	// Move all element not less than
	// pwmDutyTab[channel] up for 1 index.
	// After add new element in the formed gap.
	asm("cli\n");
 122:	f8 94       	cli
    for( j = ActiveChann.Num; j > i; --j){
 124:	69 17       	cp	r22, r25
 126:	68 f4       	brcc	.+26     	; 0x142 <_Z14PWM_AddChannelh+0x7a>
 128:	29 2f       	mov	r18, r25
		ActiveChann.Tab[j] = ActiveChann.Tab[j-1];
 12a:	e2 2f       	mov	r30, r18
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	ff 4f       	sbci	r31, 0xFF	; 255
 132:	df 01       	movw	r26, r30
 134:	11 97       	sbiw	r26, 0x01	; 1
 136:	3c 91       	ld	r19, X
 138:	30 83       	st	Z, r19
	
	// Move all element not less than
	// pwmDutyTab[channel] up for 1 index.
	// After add new element in the formed gap.
	asm("cli\n");
    for( j = ActiveChann.Num; j > i; --j){
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	26 13       	cpse	r18, r22
 13e:	f5 cf       	rjmp	.-22     	; 0x12a <_Z14PWM_AddChannelh+0x62>
 140:	01 c0       	rjmp	.+2      	; 0x144 <_Z14PWM_AddChannelh+0x7c>
 142:	69 2f       	mov	r22, r25
		ActiveChann.Tab[j] = ActiveChann.Tab[j-1];
	}
	ActiveChann.Tab[j] = channel;
 144:	e6 2f       	mov	r30, r22
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e0 50       	subi	r30, 0x00	; 0
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	80 83       	st	Z, r24
	asm("sei\n");
 14e:	78 94       	sei
	
	++ActiveChann.Num;
 150:	9f 5f       	subi	r25, 0xFF	; 255
 152:	90 93 08 01 	sts	0x0108, r25
 156:	08 95       	ret

00000158 <_Z16Servo_ChangeDuty9ServoNamet>:
}

u8 Servo_ChangeDuty(enum ServoName s, u16 newDuty){
	u8 i;
	if(newDuty < 10 || newDuty > SERVO_PWM_PERIOD_US - 10){
 158:	9b 01       	movw	r18, r22
 15a:	2a 50       	subi	r18, 0x0A	; 10
 15c:	31 09       	sbc	r19, r1
 15e:	2d 30       	cpi	r18, 0x0D	; 13
 160:	3e 44       	sbci	r19, 0x4E	; 78
 162:	b0 f5       	brcc	.+108    	; 0x1d0 <_Z16Servo_ChangeDuty9ServoNamet+0x78>
		return 1;
	};
	while(!pwmCanBeChanged);
 164:	90 91 54 01 	lds	r25, 0x0154
 168:	99 23       	and	r25, r25
 16a:	e1 f3       	breq	.-8      	; 0x164 <_Z16Servo_ChangeDuty9ServoNamet+0xc>
	asm("cli\n");
 16c:	f8 94       	cli
	for(i = 0; i < ActiveChann.Num; i++){
 16e:	30 91 08 01 	lds	r19, 0x0108
 172:	33 23       	and	r19, r19
 174:	09 f1       	breq	.+66     	; 0x1b8 <_Z16Servo_ChangeDuty9ServoNamet+0x60>
		if(ActiveChann.Tab[i] == (u8)s){
 176:	90 91 00 01 	lds	r25, 0x0100
 17a:	98 13       	cpse	r25, r24
 17c:	17 c0       	rjmp	.+46     	; 0x1ac <_Z16Servo_ChangeDuty9ServoNamet+0x54>
 17e:	04 c0       	rjmp	.+8      	; 0x188 <_Z16Servo_ChangeDuty9ServoNamet+0x30>
 180:	21 91       	ld	r18, Z+
 182:	28 13       	cpse	r18, r24
 184:	16 c0       	rjmp	.+44     	; 0x1b2 <_Z16Servo_ChangeDuty9ServoNamet+0x5a>
 186:	01 c0       	rjmp	.+2      	; 0x18a <_Z16Servo_ChangeDuty9ServoNamet+0x32>
	if(newDuty < 10 || newDuty > SERVO_PWM_PERIOD_US - 10){
		return 1;
	};
	while(!pwmCanBeChanged);
	asm("cli\n");
	for(i = 0; i < ActiveChann.Num; i++){
 188:	90 e0       	ldi	r25, 0x00	; 0
		if(ActiveChann.Tab[i] == (u8)s){
			for(i++; i < ActiveChann.Num; i++){
 18a:	9f 5f       	subi	r25, 0xFF	; 255
 18c:	93 17       	cp	r25, r19
 18e:	50 f4       	brcc	.+20     	; 0x1a4 <_Z16Servo_ChangeDuty9ServoNamet+0x4c>
				ActiveChann.Tab[i-1] = ActiveChann.Tab[i];
 190:	e9 2f       	mov	r30, r25
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	e0 50       	subi	r30, 0x00	; 0
 196:	ff 4f       	sbci	r31, 0xFF	; 255
 198:	20 81       	ld	r18, Z
 19a:	31 97       	sbiw	r30, 0x01	; 1
 19c:	20 83       	st	Z, r18
	};
	while(!pwmCanBeChanged);
	asm("cli\n");
	for(i = 0; i < ActiveChann.Num; i++){
		if(ActiveChann.Tab[i] == (u8)s){
			for(i++; i < ActiveChann.Num; i++){
 19e:	9f 5f       	subi	r25, 0xFF	; 255
 1a0:	93 13       	cpse	r25, r19
 1a2:	f6 cf       	rjmp	.-20     	; 0x190 <_Z16Servo_ChangeDuty9ServoNamet+0x38>
				ActiveChann.Tab[i-1] = ActiveChann.Tab[i];
			}
			ActiveChann.Num--;
 1a4:	31 50       	subi	r19, 0x01	; 1
 1a6:	30 93 08 01 	sts	0x0108, r19
			break;
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <_Z16Servo_ChangeDuty9ServoNamet+0x60>
 1ac:	e1 e0       	ldi	r30, 0x01	; 1
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
	if(newDuty < 10 || newDuty > SERVO_PWM_PERIOD_US - 10){
		return 1;
	};
	while(!pwmCanBeChanged);
	asm("cli\n");
	for(i = 0; i < ActiveChann.Num; i++){
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	9f 5f       	subi	r25, 0xFF	; 255
 1b4:	93 13       	cpse	r25, r19
 1b6:	e4 cf       	rjmp	.-56     	; 0x180 <_Z16Servo_ChangeDuty9ServoNamet+0x28>
			}
			ActiveChann.Num--;
			break;
		}
	}
	asm("sei\n");
 1b8:	78 94       	sei
	pwmDutyTab[(u8)s] = newDuty;
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e6 5f       	subi	r30, 0xF6	; 246
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	71 83       	std	Z+1, r23	; 0x01
 1c8:	60 83       	st	Z, r22
	PWM_AddChannel((u8)s);
 1ca:	7e df       	rcall	.-260    	; 0xc8 <_Z14PWM_AddChannelh>
	return 0;
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	08 95       	ret
}

u8 Servo_ChangeDuty(enum ServoName s, u16 newDuty){
	u8 i;
	if(newDuty < 10 || newDuty > SERVO_PWM_PERIOD_US - 10){
		return 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
	}
	asm("sei\n");
	pwmDutyTab[(u8)s] = newDuty;
	PWM_AddChannel((u8)s);
	return 0;
}
 1d2:	08 95       	ret

000001d4 <_Z6PinOuthh>:

void PinOut(u8 channel, u8 out){
	if(out){
 1d4:	66 23       	and	r22, r22
 1d6:	c1 f0       	breq	.+48     	; 0x208 <_Z6PinOuthh+0x34>
		*pinTab[channel].PORT |= 1 << pinTab[channel].p;
 1d8:	97 e0       	ldi	r25, 0x07	; 7
 1da:	89 9f       	mul	r24, r25
 1dc:	d0 01       	movw	r26, r0
 1de:	11 24       	eor	r1, r1
 1e0:	a4 5e       	subi	r26, 0xE4	; 228
 1e2:	be 4f       	sbci	r27, 0xFE	; 254
 1e4:	12 96       	adiw	r26, 0x02	; 2
 1e6:	ed 91       	ld	r30, X+
 1e8:	fc 91       	ld	r31, X
 1ea:	13 97       	sbiw	r26, 0x03	; 3
 1ec:	40 81       	ld	r20, Z
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	c9 01       	movw	r24, r18
 1f4:	16 96       	adiw	r26, 0x06	; 6
 1f6:	0c 90       	ld	r0, X
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <_Z6PinOuthh+0x2a>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	0a 94       	dec	r0
 200:	e2 f7       	brpl	.-8      	; 0x1fa <_Z6PinOuthh+0x26>
 202:	84 2b       	or	r24, r20
 204:	80 83       	st	Z, r24
 206:	08 95       	ret
	}else{
		*pinTab[channel].PORT &= ~(1 << pinTab[channel].p);
 208:	97 e0       	ldi	r25, 0x07	; 7
 20a:	89 9f       	mul	r24, r25
 20c:	d0 01       	movw	r26, r0
 20e:	11 24       	eor	r1, r1
 210:	a4 5e       	subi	r26, 0xE4	; 228
 212:	be 4f       	sbci	r27, 0xFE	; 254
 214:	12 96       	adiw	r26, 0x02	; 2
 216:	ed 91       	ld	r30, X+
 218:	fc 91       	ld	r31, X
 21a:	13 97       	sbiw	r26, 0x03	; 3
 21c:	40 81       	ld	r20, Z
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	c9 01       	movw	r24, r18
 224:	16 96       	adiw	r26, 0x06	; 6
 226:	0c 90       	ld	r0, X
 228:	02 c0       	rjmp	.+4      	; 0x22e <_Z6PinOuthh+0x5a>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	0a 94       	dec	r0
 230:	e2 f7       	brpl	.-8      	; 0x22a <_Z6PinOuthh+0x56>
 232:	80 95       	com	r24
 234:	84 23       	and	r24, r20
 236:	80 83       	st	Z, r24
 238:	08 95       	ret

0000023a <_Z5Servo9ServoName11ServoAction>:
};

struct ActiveChann_TypeDef ActiveChann = {{0, 0, 0, 0, 0, 0, 0, 0}, 0, NUM_SERVO + 1};
	
void Servo(enum ServoName s, enum ServoAction a){
	switch(a){
 23a:	66 23       	and	r22, r22
 23c:	19 f0       	breq	.+6      	; 0x244 <_Z5Servo9ServoName11ServoAction+0xa>
 23e:	61 30       	cpi	r22, 0x01	; 1
 240:	d1 f0       	breq	.+52     	; 0x276 <_Z5Servo9ServoName11ServoAction+0x3c>
 242:	08 95       	ret
	case Init:
		// Set proper pins as outputs
		*pinTab[(u8)s].DDR |= 1 << pinTab[(u8)s].p;
 244:	97 e0       	ldi	r25, 0x07	; 7
 246:	89 9f       	mul	r24, r25
 248:	d0 01       	movw	r26, r0
 24a:	11 24       	eor	r1, r1
 24c:	a4 5e       	subi	r26, 0xE4	; 228
 24e:	be 4f       	sbci	r27, 0xFE	; 254
 250:	ed 91       	ld	r30, X+
 252:	fc 91       	ld	r31, X
 254:	11 97       	sbiw	r26, 0x01	; 1
 256:	90 81       	ld	r25, Z
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	9a 01       	movw	r18, r20
 25e:	16 96       	adiw	r26, 0x06	; 6
 260:	0c 90       	ld	r0, X
 262:	02 c0       	rjmp	.+4      	; 0x268 <_Z5Servo9ServoName11ServoAction+0x2e>
 264:	22 0f       	add	r18, r18
 266:	33 1f       	adc	r19, r19
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <_Z5Servo9ServoName11ServoAction+0x2a>
 26c:	29 2b       	or	r18, r25
 26e:	20 83       	st	Z, r18
		PinOut((u8)s, LOW);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	b0 cf       	rjmp	.-160    	; 0x1d4 <_Z6PinOuthh>
		break;
 274:	08 95       	ret
	case EnablePWM:
		PWM_AddChannel((u8)s);
 276:	28 cf       	rjmp	.-432    	; 0xc8 <_Z14PWM_AddChannelh>
 278:	08 95       	ret

0000027a <_Z18ATmega8_16bitTimerv>:
			}
		}
		_delay_ms(1);
	}
	return 0;
}
 27a:	8f ed       	ldi	r24, 0xDF	; 223
 27c:	91 eb       	ldi	r25, 0xB1	; 177
 27e:	9d bd       	out	0x2d, r25	; 45
 280:	8c bd       	out	0x2c, r24	; 44
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	8e bd       	out	0x2e, r24	; 46
 286:	87 b7       	in	r24, 0x37	; 55
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	87 bf       	out	0x37, r24	; 55
 28c:	08 95       	ret

0000028e <__vector_14>:
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0b b6       	in	r0, 0x3b	; 59
 29a:	0f 92       	push	r0
 29c:	1f 93       	push	r17
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
 2ba:	80 91 08 01 	lds	r24, 0x0108
 2be:	88 23       	and	r24, r24
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <__vector_14+0x36>
 2c2:	70 c0       	rjmp	.+224    	; 0x3a4 <__vector_14+0x116>
 2c4:	e0 91 09 01 	lds	r30, 0x0109
 2c8:	e9 30       	cpi	r30, 0x09	; 9
 2ca:	11 f5       	brne	.+68     	; 0x310 <__vector_14+0x82>
 2cc:	10 92 54 01 	sts	0x0154, r1
 2d0:	88 23       	and	r24, r24
 2d2:	71 f0       	breq	.+28     	; 0x2f0 <__vector_14+0x62>
 2d4:	10 e0       	ldi	r17, 0x00	; 0
 2d6:	c8 e0       	ldi	r28, 0x08	; 8
 2d8:	d1 e0       	ldi	r29, 0x01	; 1
 2da:	e1 2f       	mov	r30, r17
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	61 e0       	ldi	r22, 0x01	; 1
 2e4:	80 81       	ld	r24, Z
 2e6:	76 df       	rcall	.-276    	; 0x1d4 <_Z6PinOuthh>
 2e8:	1f 5f       	subi	r17, 0xFF	; 255
 2ea:	88 81       	ld	r24, Y
 2ec:	18 17       	cp	r17, r24
 2ee:	a8 f3       	brcs	.-22     	; 0x2da <__vector_14+0x4c>
 2f0:	10 92 09 01 	sts	0x0109, r1
 2f4:	e0 91 00 01 	lds	r30, 0x0100
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	e6 5f       	subi	r30, 0xF6	; 246
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	80 81       	ld	r24, Z
 304:	91 81       	ldd	r25, Z+1	; 0x01
 306:	80 95       	com	r24
 308:	90 95       	com	r25
 30a:	9d bd       	out	0x2d, r25	; 45
 30c:	8c bd       	out	0x2c, r24	; 44
 30e:	4e c0       	rjmp	.+156    	; 0x3ac <__vector_14+0x11e>
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	e0 50       	subi	r30, 0x00	; 0
 314:	ff 4f       	sbci	r31, 0xFF	; 255
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	5c df       	rcall	.-328    	; 0x1d4 <_Z6PinOuthh>
 31c:	80 91 09 01 	lds	r24, 0x0109
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	20 91 08 01 	lds	r18, 0x0108
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	31 09       	sbc	r19, r1
 32c:	82 17       	cp	r24, r18
 32e:	93 07       	cpc	r25, r19
 330:	fc f4       	brge	.+62     	; 0x370 <__vector_14+0xe2>
 332:	fc 01       	movw	r30, r24
 334:	e0 50       	subi	r30, 0x00	; 0
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	a1 81       	ldd	r26, Z+1	; 0x01
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	aa 0f       	add	r26, r26
 33e:	bb 1f       	adc	r27, r27
 340:	a6 5f       	subi	r26, 0xF6	; 246
 342:	be 4f       	sbci	r27, 0xFE	; 254
 344:	e0 81       	ld	r30, Z
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	e6 5f       	subi	r30, 0xF6	; 246
 34e:	fe 4f       	sbci	r31, 0xFE	; 254
 350:	8d 91       	ld	r24, X+
 352:	9c 91       	ld	r25, X
 354:	20 81       	ld	r18, Z
 356:	31 81       	ldd	r19, Z+1	; 0x01
 358:	82 1b       	sub	r24, r18
 35a:	93 0b       	sbc	r25, r19
 35c:	80 95       	com	r24
 35e:	90 95       	com	r25
 360:	9d bd       	out	0x2d, r25	; 45
 362:	8c bd       	out	0x2c, r24	; 44
 364:	e9 e0       	ldi	r30, 0x09	; 9
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	80 81       	ld	r24, Z
 36a:	8f 5f       	subi	r24, 0xFF	; 255
 36c:	80 83       	st	Z, r24
 36e:	1e c0       	rjmp	.+60     	; 0x3ac <__vector_14+0x11e>
 370:	fc 01       	movw	r30, r24
 372:	e0 50       	subi	r30, 0x00	; 0
 374:	ff 4f       	sbci	r31, 0xFF	; 255
 376:	e0 81       	ld	r30, Z
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	e6 5f       	subi	r30, 0xF6	; 246
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	20 81       	ld	r18, Z
 384:	31 81       	ldd	r19, Z+1	; 0x01
 386:	80 e2       	ldi	r24, 0x20	; 32
 388:	9e e4       	ldi	r25, 0x4E	; 78
 38a:	82 1b       	sub	r24, r18
 38c:	93 0b       	sbc	r25, r19
 38e:	80 95       	com	r24
 390:	90 95       	com	r25
 392:	9d bd       	out	0x2d, r25	; 45
 394:	8c bd       	out	0x2c, r24	; 44
 396:	89 e0       	ldi	r24, 0x09	; 9
 398:	80 93 09 01 	sts	0x0109, r24
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	80 93 54 01 	sts	0x0154, r24
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <__vector_14+0x11e>
 3a4:	8f ed       	ldi	r24, 0xDF	; 223
 3a6:	91 eb       	ldi	r25, 0xB1	; 177
 3a8:	9d bd       	out	0x2d, r25	; 45
 3aa:	8c bd       	out	0x2c, r24	; 44
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	bf 91       	pop	r27
 3b6:	af 91       	pop	r26
 3b8:	9f 91       	pop	r25
 3ba:	8f 91       	pop	r24
 3bc:	7f 91       	pop	r23
 3be:	6f 91       	pop	r22
 3c0:	5f 91       	pop	r21
 3c2:	4f 91       	pop	r20
 3c4:	3f 91       	pop	r19
 3c6:	2f 91       	pop	r18
 3c8:	1f 91       	pop	r17
 3ca:	0f 90       	pop	r0
 3cc:	0b be       	out	0x3b, r0	; 59
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <main>:

int main(void)
{
	SP = 0xFFF;
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f e0       	ldi	r25, 0x0F	; 15
 3dc:	9e bf       	out	0x3e, r25	; 62
 3de:	8d bf       	out	0x3d, r24	; 61
	
	Servo(CanSat1, Init);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	2a df       	rcall	.-428    	; 0x23a <_Z5Servo9ServoName11ServoAction>
	Servo(CanSat1, EnablePWM);
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	27 df       	rcall	.-434    	; 0x23a <_Z5Servo9ServoName11ServoAction>
	ATmega8_16bitTimer();
 3ec:	46 df       	rcall	.-372    	; 0x27a <_Z18ATmega8_16bitTimerv>
	sei();
 3ee:	78 94       	sei
	while(1){
		for(calvar = 18000; calvar < 19000; calvar += 50){
 3f0:	c0 e5       	ldi	r28, 0x50	; 80
 3f2:	d6 e4       	ldi	r29, 0x46	; 70
 3f4:	d0 93 1b 01 	sts	0x011B, r29
 3f8:	c0 93 1a 01 	sts	0x011A, r28
 3fc:	80 91 1a 01 	lds	r24, 0x011A
 400:	90 91 1b 01 	lds	r25, 0x011B
 404:	88 33       	cpi	r24, 0x38	; 56
 406:	9a 44       	sbci	r25, 0x4A	; 74
 408:	a8 f7       	brcc	.-22     	; 0x3f4 <main+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	94 e3       	ldi	r25, 0x34	; 52
 40e:	2c e0       	ldi	r18, 0x0C	; 12
 410:	81 50       	subi	r24, 0x01	; 1
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	20 40       	sbci	r18, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <main+0x38>
 418:	00 c0       	rjmp	.+0      	; 0x41a <main+0x42>
 41a:	00 00       	nop
					_delay_ms(500);
					Servo_ChangeDuty(CanSat1,calvar);
 41c:	60 91 1a 01 	lds	r22, 0x011A
 420:	70 91 1b 01 	lds	r23, 0x011B
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	98 de       	rcall	.-720    	; 0x158 <_Z16Servo_ChangeDuty9ServoNamet>
	Servo(CanSat1, Init);
	Servo(CanSat1, EnablePWM);
	ATmega8_16bitTimer();
	sei();
	while(1){
		for(calvar = 18000; calvar < 19000; calvar += 50){
 428:	80 91 1a 01 	lds	r24, 0x011A
 42c:	90 91 1b 01 	lds	r25, 0x011B
 430:	c2 96       	adiw	r24, 0x32	; 50
 432:	90 93 1b 01 	sts	0x011B, r25
 436:	80 93 1a 01 	sts	0x011A, r24
 43a:	80 91 1a 01 	lds	r24, 0x011A
 43e:	90 91 1b 01 	lds	r25, 0x011B
 442:	88 33       	cpi	r24, 0x38	; 56
 444:	9a 44       	sbci	r25, 0x4A	; 74
 446:	08 f3       	brcs	.-62     	; 0x40a <main+0x32>
 448:	d5 cf       	rjmp	.-86     	; 0x3f4 <main+0x1c>

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
